   (defwindow bar [screen]
      :exclusive true
      :monitor screen
      :windowtype "dock"
      :geometry (geometry :x "0%"
                  :y "0%"
                  :width "20px"
                  :height "100%"
                  :anchor "right center"
                  )
      (bar :monitor screen))

    @generatedWidgets@

    (defwidget bar [monitor]
      (centerbox :orientation "v"
        (top :monitor monitor)
        (center :monitor monitor)
        (bottom :monitor monitor)))

    ; Top
    (defwidget top [monitor]
      (box :orientation "v" :vexpand true :spacing 0 :space-evenly false
        (workspace :monitor monitor)
        ))

    (deflisten all-workspaces "hyprland-workspaces _ | jq -c --unbuffered 'to_entries | map([{(.key | tostring): .value}, (if .value.name != null then {(.value.name): .value} else empty end)]) | flatten | add'")
    (defwidget workspace [monitor]
      (box
        :orientation "v"
        (for workspace in {all-workspaces[monitor].workspaces}
          (button
            :class "workspace-button ${workspace.active ? "active" : ""}"
            :onclick "hyprctl dispatch workspace ${workspace.id}"
            {workspace.active ? "-${workspace.name}-" : "${workspace.name}"}))))

    ; Center
    (defwidget center [monitor]
      (box :orientation "v"
        (window :monitor monitor)))
    (deflisten windows "hyprland-activewindow _ | jq -c --unbuffered 'to_entries | map([{(.key | tostring): .value}, (if .value.name != null then {(.value.name): .value} else empty end)]) | flatten | add'")
    (defwidget window [monitor]
      (box
        (label :text "${windows['${monitor}'].title}" :angle -90)
      ))

    ; Bottom
      (defwidget bottom [monitor]
        (box :orientation "v" :valign "end" :spacing 6 :space-evenly false
          (systray :orientation "v" :icon-size 16 :spacing 2 :class "systray")
          (bluetooth)
          (net-indicator)
          (vol :monitor monitor)
          (battery)
          (clock)
          ))

    (defwidget bluetooth []
      (box :class "bluetooth" :spacing 0 :space-evenly false :halign "center"
        (label :text "" :class "bluetooth-icon")
        (label :text "${num-bluetooth-devices}" :class "bluetooth-count")))

    (deflisten net-status
      :interval 5
      "@networkBin@")

    (defwidget net-indicator []
      (box :tooltip {net-status["eth"] != "" ? "Ethernet: ${net-status['eth']}" :
        net-status['ssid'] != "" ? "Wi-Fi: ${net-status['ssid']}" :
          "No network connection"}
        :class "network-indicator"
        :halign "center"
        :valign "center"
        :spacing 0
        (label :text
          {net-status["eth"] != "" ? "" :
          net-status['ssid'] != "" ? "" :
          "⚠"})))

    (deflisten audio-sinks
      "@audioSinksBin@")
    (defwindow audio-selector [screen]
      :geometry (geometry :anchor "bottom right")
      :stacking "fg"
      :monitor screen
      (box
        :orientation "vertical"
        :class "menu"
        (for line in audio-sinks
            (button
              :class "${line.state == "RUNNING" ? "audio-sink-button-active" : ""} audio-sink-button tooltip-item"
              :onclick "pactl set-default-sink ${line.name} & @toggleWindow@ audio-selector --screen ${screen}"
              :tooltip "${line.state}"
              (label :text "${line.description}" :xalign "1")
        ))))

    (defwidget vol [monitor]
      (eventbox
        :onclick "@toggleWindow@ audio-selector --screen ${monitor}"
        
        (box
          :orientation "v"
          :class "volume"
          (cava)
          (box :class "volume-percentage"
            (label :text "${volume}%" :xalign "1")))))


    (deflisten volume "@volBin@")

    (defpoll num-bluetooth-devices :interval "10s"
      "bluetoothctl devices Connected | wc -l || echo 0")

    (deflisten cava "@cavaBin@")
    (defwidget cava []
      (scroll :hscroll true
              :vscroll false
              :class "cava"
              (transform :scale-x "16%"
                   cava)))


    (defpoll battery :interval "10s" "@batteryBin@")
    (defwidget battery []
      (box :class "battery"
           :halign "center"
           :valign "end"
           :orientation "v"
           :space-evenly false
           :spacing -2
           :visible {battery.state != ""}
           :tooltip {
            "${battery.state} - ${battery.percent}% - ${battery.rate}W"
           }
           (box :class "battery-icon"
                (label :text {
                  battery.state == "charging" ?
                    (battery.percent < 10 ? "󰢟" :
                    battery.percent < 20 ? "󰢜" :
                    battery.percent < 30 ? "󰂆" :
                    battery.percent < 40 ? "󰂇" :
                    battery.percent < 50 ? "󰂈" :
                    battery.percent < 60 ? "󰢝" :
                    battery.percent < 70 ? "󰂉" :
                    battery.percent < 80 ? "󰢞" :
                    battery.percent < 90 ? "󰂊" :
                    battery.percent < 100 ? "󰂋" : "󱐋") :
                  battery.state == "discharging" || battery.state == "pending-discharge" ?
                  (battery.percent < 10 ? "󰂎" :
                    battery.percent < 20 ? "󰁺" :
                    battery.percent < 30 ? "󰁻" :
                    battery.percent < 40 ? "󰁼" :
                    battery.percent < 50 ? "󰁽" :
                    battery.percent < 60 ? "󰁾" :
                    battery.percent < 70 ? "󰁿" :
                    battery.percent < 80 ? "󰂀" :
                    battery.percent < 90 ? "󰂁" :
                    battery.percent < 100 ? "󰂂" :
                    battery.percent == 100 ? "󰁹" : "󰂃") :
                  battery.state == "fully-charged" || battery.state == "pending-charge" ? "󱟢" :
                  battery.state == "empty" ? "󱃍" :
                  "󱉝"}
                  :angle -90))
           (box :class "battery-percentage"
                (label :text "${battery.percent}%" :xalign "1"))))



    (defpoll hour :interval "1s"
      "date '+%I'")
    (defpoll minute :interval "1s"
      "date '+%M'")
    (defpoll ampm :interval "1s"
      "date '+%p' | tr '[:upper:]' '[:lower:]'")
    (defpoll date :interval "1s"
      "date '+%m/%d'")
    (defwidget clock []
      (box :class "clock"
           :halign "center"
           :valign "end"
           :orientation "v"
           :space-evenly false
           :spacing -2
           (box :class "clock-hour"
           hour)
           (box :class "clock-minute"
           minute)
           (box :class "clock-ampm"
           ampm)
           (box :class "clock-date"
           date)))

